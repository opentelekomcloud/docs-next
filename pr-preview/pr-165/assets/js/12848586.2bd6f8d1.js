"use strict";(self.webpackChunkdocs_next=self.webpackChunkdocs_next||[]).push([[75201],{71925:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var r=s(74848),o=s(28453);const t={id:"crossplane",title:"Crossplane",tags:["crossplane","devops","platform-engineering","cce","infrastructure"]},i="Crossplane",a={id:"blueprints/by-use-case/devops/crossplane/crossplane",title:"Crossplane",description:"Crossplane is an open-source Kubernetes add-on that extends Kubernetes' functionality by enabling it to manage infrastructure resources. It allows Kubernetes to serve as a control plane for provisioning and managing infrastructure such as databases, cloud services, and other external systems, similar to how it manages containerized applications.",source:"@site/docs/blueprints/by-use-case/devops/crossplane/overview.md",sourceDirName:"blueprints/by-use-case/devops/crossplane",slug:"/blueprints/by-use-case/devops/crossplane/crossplane",permalink:"/docs-next/pr-preview/pr-165/docs/blueprints/by-use-case/devops/crossplane/crossplane",draft:!1,unlisted:!1,editUrl:"https://github.com/opentelekomcloud/docs-next/tree/main/docs/blueprints/by-use-case/devops/crossplane/overview.md",tags:[{inline:!0,label:"crossplane",permalink:"/docs-next/pr-preview/pr-165/docs/tags/crossplane"},{inline:!0,label:"devops",permalink:"/docs-next/pr-preview/pr-165/docs/tags/devops"},{inline:!0,label:"platform-engineering",permalink:"/docs-next/pr-preview/pr-165/docs/tags/platform-engineering"},{inline:!0,label:"cce",permalink:"/docs-next/pr-preview/pr-165/docs/tags/cce"},{inline:!0,label:"infrastructure",permalink:"/docs-next/pr-preview/pr-165/docs/tags/infrastructure"}],version:"current",frontMatter:{id:"crossplane",title:"Crossplane",tags:["crossplane","devops","platform-engineering","cce","infrastructure"]},sidebar:"blueprintsSidebar",previous:{title:"Build a CI Pipeline with Jenkins, SWR and CCE",permalink:"/docs-next/pr-preview/pr-165/docs/blueprints/by-use-case/devops/ci-jenkins-swr-cce"},next:{title:"Hybrid & MultiCloud",permalink:"/docs-next/pr-preview/pr-165/docs/blueprints/by-use-case/hybrid/"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:3},{value:"How Crossplane Works",id:"how-crossplane-works",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Installing Crossplane",id:"installing-crossplane",level:2},{value:"Installing Open Telekom Cloud Crossplane Provider",id:"installing-open-telekom-cloud-crossplane-provider",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"crossplane",children:"Crossplane"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.crossplane.io/",children:"Crossplane"})," is an open-source Kubernetes add-on that extends Kubernetes' functionality by enabling it to manage infrastructure resources. It allows Kubernetes to serve as a control plane for provisioning and managing infrastructure such as databases, cloud services, and other external systems, similar to how it manages containerized applications."]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Infrastructure as Code"}),": Crossplane allows users to define and manage infrastructure using Kubernetes-native declarative configurations (YAML files), promoting consistency and version control."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Composability"}),": Crossplane enables users to create reusable infrastructure components, which can be composed into higher-level abstractions. This makes it easier to manage complex infrastructure setups."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Extensibility"}),": It supports a wide range of cloud providers (like AWS, GCP, Azure & Open Telekom Cloud) and on-premises environments. Users can extend Crossplane by writing their own custom resource definitions (CRDs) and controllers."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Seamless Integration"}),": By integrating with Kubernetes, Crossplane leverages Kubernetes' existing ecosystem, including its API, RBAC, and ecosystem tools, to provide a unified management interface."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cross-Provider Portability"}),": Crossplane abstracts the underlying infrastructure provider details, allowing for easier migration and multi-cloud strategies. It offers a consistent API regardless of the provider."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"how-crossplane-works",children:"How Crossplane Works"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Custom Resource Definitions (CRDs)"}),": Crossplane defines CRDs for various infrastructure resources (like databases, storage, networking, etc.). These CRDs extend Kubernetes' API to manage non-container resources."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Controllers"}),": Crossplane controllers watch for changes to these CRDs and take actions to ensure that the current state matches the desired state, provisioning and managing resources as needed."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Providers"}),": Crossplane uses providers to interact with specific cloud services or infrastructure resources. Providers encapsulate the logic for managing resources on different platforms."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cloud Resource Management"}),": Provision and manage cloud resources such as databases, virtual machines, and networking components using Kubernetes-native tools."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hybrid Cloud Deployments"}),": Manage resources across multiple clouds and on-premises environments from a single control plane."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DevOps Automation"}),": Automate the lifecycle management of infrastructure alongside application deployment processes."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Crossplane essentially brings the principles of Kubernetes orchestration to infrastructure management, enabling a more unified and streamlined approach to handling both application and infrastructure resources within the same ecosystem."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You can read more in the official ",(0,r.jsx)(n.a,{href:"https://docs.crossplane.io/v1.16/",children:"Crossplane Documentation"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"installing-crossplane",children:"Installing Crossplane"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"In order to execute the rest of the blueprint, an existing CCE Cluster is necessary."})}),"\n",(0,r.jsx)(n.p,{children:"We are going to install Crossplane using the official Helm chart:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"helm repo add crossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-stable/crossplane \n"})}),"\n",(0,r.jsxs)(n.p,{children:["After installing, the Helm chart will create two deployments in the ",(0,r.jsx)(n.code,{children:"crossplane-system"})," namespace to deploy the Crossplane pods:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl get deployments -n crossplane-system\n\nNAME                      READY   UP-TO-DATE   AVAILABLE   AGE\ncrossplane                1/1     1            1           8m13s\ncrossplane-rbac-manager   1/1     1            1           8m13s\n"})}),"\n",(0,r.jsx)(n.h2,{id:"installing-open-telekom-cloud-crossplane-provider",children:"Installing Open Telekom Cloud Crossplane Provider"}),"\n",(0,r.jsxs)(n.p,{children:["Open Telekom Cloud comes with its own Crossplane provider (",(0,r.jsx)(n.a,{href:"https://github.com/opentelekomcloud/provider-opentelekomcloud",children:"provider-opentelekomcloud"}),") that is built using ",(0,r.jsx)(n.a,{href:"https://github.com/crossplane/upjet",children:"Upjet"})," code generation tools and exposes XRM-conformant managed resources for the Open Telekom Cloud API."]}),"\n",(0,r.jsxs)(n.p,{children:["Deploy with ",(0,r.jsx)(n.code,{children:"kubectl apply -f"})," the following manifests:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Installing the Provider"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="provider.yaml"',children:" apiVersion: pkg.crossplane.io/v1\n kind: Provider\n metadata:\n     name: provider-opentelekomcloud\n spec:\n     package: xpkg.upbound.io/opentelekomcloud/provider-opentelekomcloud:v0.1.0\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Installing the Provider Credentials"}),"\n",(0,r.jsxs)(n.p,{children:["Pass the Open Telekom Cloud credentials as a Kubernetes ",(0,r.jsx)(n.code,{children:"Secret"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="provider-creds.yaml"',children:'apiVersion: v1\nkind: Secret\nmetadata:\nname: provider-opentelekomcloud-creds\nnamespace: crossplane-system\ntype: Opaque\nstringData:\ncredentials: |\n    {\n    "user_name": "${user_name}",\n    "password": "${password}",\n    "auth_url": "https://iam.eu-de.otc.t-systems.com/v3",\n    "domain_name": "OTC00000000001000XXXXX",\n    "tenant_name": "${tenant_name}",\n    "swauth": "false",\n    "allow_reauth": "true",\n    "max_retries": "2",\n    "max_backoff_retries": "6",\n    "backoff_retry_timeout": "60",\n    "insecure": "false"\n    }\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Fill in ",(0,r.jsx)(n.code,{children:"user_name"}),", ",(0,r.jsx)(n.code,{children:"password"}),", ",(0,r.jsx)(n.code,{children:"domain_name"})," and ",(0,r.jsx)(n.code,{children:"tenant_name"})," with your organization's values."]})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Installing the Provider Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="provider-config.yaml"',children:"apiVersion: opentelekomcloud.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\nname: default\nspec:\ncredentials:\n    source: Secret\n    secretRef:\n    name: provider-opentelekomcloud-creds\n    namespace: crossplane-system\n    key: credentials\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["After a couple of minutes the ",(0,r.jsx)(n.code,{children:"Provider"})," will deploy the necessary ",(0,r.jsx)(n.code,{children:"Pod"}),"s and ",(0,r.jsx)(n.code,{children:"CRD"}),"s of the Crossplane Provider for Open Telekom Cloud."]})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(96540);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);