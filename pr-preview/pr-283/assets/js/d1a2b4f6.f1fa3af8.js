"use strict";(self.webpackChunkdocs_next=self.webpackChunkdocs_next||[]).push([[34321],{52369:e=>{e.exports=JSON.parse('{"tag":{"label":"dns","permalink":"/docs-next/pr-preview/pr-283/docs/tags/dns","allTagsPath":"/docs-next/pr-preview/pr-283/docs/tags","count":4,"items":[{"id":"best-practices/networking/domain-name-service/configuring-private-domain-names-for-ecss","title":"Configuring Private Domain Names for ECSs","description":"If one of your ECSs is not working normally and you need to use the backup ECS to handle requests, but you have not configured private zones for the two ECSs, you need to change the private IP address in the code for the faulty ECS. This will interrupt your services and cause you to publish your website again, which is time- and labor-consuming.","permalink":"/docs-next/pr-preview/pr-283/docs/best-practices/networking/domain-name-service/configuring-private-domain-names-for-ecss"},{"id":"blueprints/by-use-case/networking/create-a-public-dns-endpoint-with-externaldns","title":"Create a Public DNS Endpoint with ExternalDNS","description":"ExternalDNS is a Kubernetes component used to manage DNS records for services and applications running in a Kubernetes cluster. It automates the creation, update, and deletion of DNS records based on the state of resources within the cluster. ExternalDNS is typically employed in scenarios where you need to expose services running inside a Kubernetes cluster to the outside world with fully qualified domain names (FQDNs), ensuring they are accessible by external users.","permalink":"/docs-next/pr-preview/pr-283/docs/blueprints/by-use-case/networking/create-a-public-dns-endpoint-with-externaldns"},{"id":"blueprints/by-use-case/security/keycloak/cce-keycloak","title":"Deploy Keycloak on CCE","description":"In this blueprint, we are going to discuss the steps to install Keycloak, in Open Telekom Cloud, on a CCE Cluster.","permalink":"/docs-next/pr-preview/pr-283/docs/blueprints/by-use-case/security/keycloak/cce-keycloak"},{"id":"best-practices/containers/cloud-container-engine/prepare-cce-for-external-workloads","title":"Prepare CCE to Expose Workloads","description":"Before deploying our workloads, the CCE cluster must be equipped with a set of foundational components. In this section, we\'ll install and configure essential prerequisites such as the NGINX Ingress Controller for routing external traffic, cert-manager for managing TLS certificates, and other supporting workloads. These components establish the baseline infrastructure required to expose services securely and ensure smooth operation of the application stack within the Kubernetes environment.","permalink":"/docs-next/pr-preview/pr-283/docs/best-practices/containers/cloud-container-engine/prepare-cce-for-external-workloads"}],"unlisted":false}}')}}]);